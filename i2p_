#!/usr/bin/env python
# I2p server stats 
# drgr33n <cheezybudz@mail.i2p>
# Version 0.1 alpha 
# Get stats from your i2p server ( https://geti2p.net/en/ )
# Create links to this plugin and name them
# - i2p_bps
# - i2p_uptime 
# This plugin depends on i2pcontrol ( http://itoopie.i2p ) 
import datetime
import json
import urllib2
import httplib
import socket
import ssl
import sys
import os
from urllib2 import HTTPError, URLError

# Info about requestable data can be found at http://i2p2.de/i2pcontrol.html & http://www.i2p2.de/ratestats.html

address = "127.0.0.1" 	# Default I2PControl Address
port = 7650 		# Default I2PControl Port
apiPassword = "itoopie" # Default I2PControl password


## Do not edit below
#GLOBALS
apiVersion = 1 		# Default API Version
msgId = 1
token = None

#Classes
class UnauthenticatedHTTPSConnection(httplib.HTTPSConnection):
	def connect(self):
		sock = socket.create_connection((self.host, self.port), self.timeout)
		if self._tunnel_host:
			self.sock = sock
			self._tunnel()
		self.sock = ssl.wrap_socket(sock,
                            cert_reqs=ssl.CERT_NONE)

class UnauthenticatedHTTPSHandler(urllib2.HTTPSHandler):
	def __init__(self, connection_class = UnauthenticatedHTTPSConnection):
		self.specialized_conn_class = connection_class
		urllib2.HTTPSHandler.__init__(self)
	def https_open(self, req):
		return self.do_open(self.specialized_conn_class, req)

#Defines
	
def checkToken():
	global token
	if (token == None):
		token = getToken()
		if (token == None):
			print("Unable to login. Quitting..")
			exit(1)


def getToken():
	loginStr = "{\"id\":" + str(msgId) + ", \"method\":\"Authenticate\",\"params\":{\"API\":" + str(apiVersion) + ", \"Password\":\"" +  apiPassword + "\"}, \"jsonrpc\":\"2.0\"}"
	try:	
		jsonResp = sendMsg(loginStr)
		return jsonResp.get("result").get("Token")

	except HTTPError, e:
		print("HTTPError: %s" % e.reason)
		exit(1)
	except URLError, e:
		print("URLError: %s" % e.reason)
		exit(1)
def sendMsg(jsonStr):
		global msgId
		https_handler = UnauthenticatedHTTPSHandler()
		url_opener = urllib2.build_opener(https_handler)
		handle = url_opener.open("https://"+address+":"+ str(port) + "/jsonrpc", jsonStr)
		response = handle.read()
		handle.close()
		msgId = msgId + 1;
		
		jsonResp = json.loads(response)
		if (jsonResp.has_key("error")):
			print ("Remote server: I2PControl Error: " + str(jsonResp.get("error").get("code")) + ", " + jsonResp.get("error").get("message"))
			exit(1)
		return jsonResp


def getRouterInfo(infoName):
	checkToken()
	msgStr = "{\"id\":" + str(msgId) + ", \"method\":\"RouterInfo\",\"params\":{\"" + infoName + "\":\"\", \"Token\":\"" + token +"\" }, \"jsonrpc\":\"2.0\"}"
	jsonResp = sendMsg(msgStr)
	return jsonResp.get("result").get(infoName)

#Will use later.
def getRate(rateName, ratePeriod):
	checkToken()
	msgStr = "{\"id\":" + str(msgId) + ", \"method\":\"GetRate\",\"params\":{\"Stat\":\"" + rateName + "\", \"Period\":" +  str(ratePeriod) + ", \"Token\":\"" + token +"\" }, \"jsonrpc\":\"2.0\"}"
	jsonResp = sendMsg(msgStr)
	return jsonResp.get("result").get("Result")

#Munin

def autoconf():
	print('yes')
	exit(0)

def config():
	if 'bps' == plugin_var:
		print('graph_title i2p KBps')
		print('graph_vlabel KBps')
		print('graph_info i2p sending and receiving KB/s')
		print('graph_category i2p')
		print('receivebps.label Receive KBps')
		print('sendbps.label Send KBps')
	elif 'uptime' == plugin_var:
		print('graph_title i2p uptime')
		print('graph_scale no')
		print('graph_args --base 1000 -l 0')
		print('graph_vlabel uptime in whole hours')
		print('graph_category i2p')
		print('uptime.label i2p uptime')
		print('uptime.draw AREA')
	else:
		raise ValueError, "unknown parameter '%s'" % plugin_var
		exit(1)

def fetch_bps():
  bwreceiveBps = getRouterInfo("i2p.router.net.bw.inbound.1s")
  bwsendBps = getRouterInfo("i2p.router.net.bw.outbound.1s")
  print('receivebps.value %s' % bwreceiveBps)
  print('sendbps.value %s' % bwsendBps)
  exit(0)

def fetch_uptime():
  rtUptime = getRouterInfo("i2p.router.uptime") / 3600000
  print('uptime.value %s' % rtUptime)
  exit(0)

def fetch():
	if 'bps' == plugin_var:
		fetch_bps()
	elif 'uptime' == plugin_var:
		fetch_uptime()
	else:
		raise ValueError, "unknown parameter '%s'" % plugin_var	
		exit(1)

#main
plugin_name=list(os.path.split(sys.argv[0]))[1]

plugin_var=plugin_name.split('_', 1)[-1]
if __name__ == '__main__':
  if len(sys.argv)>1 :
    if sys.argv[1]=="config" :
      config()
    elif sys.argv[1]=="autoconf" :
      autoconf()
    elif sys.argv[1]!="":
      raise ValueError, "unknown parameter '%s'" % sys.argv[1]
  fetch()
